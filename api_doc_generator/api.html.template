<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8">
  <title>WARP Charger</title>
  <meta content="width=device-width, initial-scale=1.0" name="viewport">
  <meta content="" name="keywords">
  <meta content="" name="description">

  <!-- Favicons -->
  <link href="img/favicon.png" rel="icon">

  <!-- Bootstrap CSS File -->
  <link href="lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">

  <!-- Libraries CSS Files -->
  <link href="lib/font-awesome/css/font-awesome.min.css" rel="stylesheet">
  <link href="lib/animate/animate.min.css" rel="stylesheet">
  <link href="lib/ionicons/css/ionicons.min.css" rel="stylesheet">
  <link href="lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
  <link href="lib/lightbox/css/lightbox.min.css" rel="stylesheet">

  <!-- Main Stylesheet File -->
  <link href="css/style.css" rel="stylesheet">

  <!-- Add non-invasive analytics. There is no cookie set and no personal data saved -->
  <script type="text/javascript">
    var _paq = _paq || [];
    _paq.push(['disableCookies']);
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
    var u="//www.tinkerforge.com/analytics/";
    _paq.push(['setTrackerUrl', u+'piwik.php']);
    _paq.push(['setSiteId', '1']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
</head>

<body data-spy="scroll" data-target="#navbar" data-offset="100">

  <!--==========================
    Header
  ============================-->
  <header id="mqtt_header" class="header header-scrolled" style="position: sticky;">
    <div class="container-fluid">
      <div id="logo" class="pull-left">
        <!-- Uncomment below if you prefer to use an image logo -->
        <a href="index.html"><img src="img/logo.png" alt="" title="" /></a>
      </div>

      <nav id="nav-menu-container">
        <ul class="nav-menu nav-menu-top">
            <li><a href="/">HOME</a></li>
            <li class="menu-has-children"><a href="/api.html">API</a>
              <ul class="push-left-outer">
                <li><a href="#mqtt">MQTT</a></li>
                <li><a href="#http">HTTP</a></li>

                <li><a href="#states">Zustände, Kommandos, Konfigurationen</a></li>
                <li class="menu-has-children"><a href="#reference">API-Referenz</a>
                    <ul class="push-left-inner">
                    <li><a href="#evse">Ladecontroller (EVSE)</a></li>
                    <li><a href="#meter">Stromzähler</a></li>
                    <li><a href="#nfc">NFC-Freischaltung</a></li>
                    <li><a href="#mqtt-config">MQTT-Konfiguration</a></li>
                    <li><a href="#wifi">WLAN-Konfiguration</a></li>
                    <li><a href="#auth">Authentifizierung</a></li>
                    <li><a href="#misc">Sonstiges</a></li>
                    <li><a href="#http-only">HTTP-Spezifisch</a></li>
                    </ul>
                </li>
              </ul>
            </li>
            <li><a href="/evcc.html">EVCC</a></li>
            <li><a href="https://www.tinkerforge.com/de/shop/warp/wallbox.html">SHOP <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg></a></li>
            <li><a href="https://www.tinkerforge.com/de/blog/">BLOG <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg></a></li>
            <li><a href="https://www.tinkerunity.org/forum/13-warp-charger/l">FORUM <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg></a></li>
            <li><a href="/index_warp1.html">WARP1</a></li>
          </ul>
      </nav><!-- #nav-menu-container -->
    </div>
  </header><!-- #header -->
  <div class="row" style="margin-right: 0">
    <nav id="navbar" class="navbar navbar-light navbar-test d-none d-lg-flex bg-light align-items-start">
        <nav class="nav nav-pills flex-column ml-2">
            <a class="navbar-brand" href="#">Inhalt</a>
            <a class="nav-link" href="#api_intro">Einführung</a>
            <div class="collapse">
                <nav class="nav nav-pills flex-column">
                </nav>
            </div>

            <a class="nav-link" href="#mqtt_section">MQTT</a>
            <div class="collapse">
                <nav class="nav nav-pills flex-column">
                    <a class="nav-link ml-3" href="#mqtt_section_configuration">Konfiguration</a>
                    <a class="nav-link ml-3" href="#mqtt_section_basics">Grundlagen</a>
                </nav>
            </div>

            <a class="nav-link" href="#http_section">HTTP</a>
            <div class="collapse">
                <nav class="nav nav-pills flex-column">
                    <a class="nav-link ml-3" href="#http_section_configuration">Konfiguration</a>
                    <a class="nav-link ml-3" href="#http_section_basics">Grundlagen</a>
                    <a class="nav-link ml-3" href="#http_section_auth">Authentifizierung</a>
                </nav>
            </div>

            <a class="nav-link" href="#states_section">Zustände, Kommandos und Konfigurationen</a>
            <div class="collapse">
                <nav class="nav nav-pills flex-column">
                    <a class="nav-link ml-3" href="#states_section_states">Zustände</a>
                    <a class="nav-link ml-3" href="#states_section_commands">Kommandos</a>
                    <a class="nav-link ml-3" href="#states_section_configs">Konfigurationen</a>
                </nav>
            </div>

            <a class="nav-link" href="#reference">API-Referenz</a>
            <div class="collapse">
                <nav class="nav nav-pills flex-column">
                    {reference-nav}
                </nav>
            </div>
        </nav>
    </nav>

  <!--==========================
    Intro Section
  ============================-->
  <main id="mqtt_main" class="col-lg-8 col-xl-9">
    <header id="start" class="reference-section-header pt-4"><h2>MQTT- und HTTP-API</h2></header>
    <section id="api_intro" class="section">
        <div class="container">
            <header class="reference-section-header">
                <h3>Einführung</h3>
            </header>
            <p>Die Varianten WARP Charger Smart und WARP Charger Pro können über MQTT und HTTP den aktuellen Zustand melden und gesteuert werden.
                Während die MQTT-API zunächst aktiviert und konfiguriert werden muss, kann die HTTP-API sofort verwendet werden, da sie auch
                vom Webinterface selbst benutzt wird.
            </p>
        </div>
    </section>
    <section id="mqtt_section" class="section">
        <div class="container">
            <header class="reference-section-header">
                <h3>MQTT</h3>
            </header>
        </div>
        <div id="mqtt_section_configuration" class="container">
            <h4>Konfiguration</h4>
            <p>Damit die Wallbox über MQTT kommuniziert, muss zunächst im Webinterface die Verbindung zum MQTT-Broker konfiguriert werden.
                Folgende Einstellungen können vorgenommen werden:</p>
            <div class="row pb-2">
                <div class="col-md-12 col-lg-6">
                    <ul>
                        <li><b>Broker-Hostname oder IP-Adresse</b>: Der Hostname oder die IP-Adresse des Brokers zu dem sich die Wallbox verbinden soll.</li>
                        <li><b>Broker-Port</b>: Der Port unter dem der Broker erreichbar ist. Der typische MQTT-Port 1883 ist voreingestellt.</li>
                        <li><b>Broker-Benutzername und Passwort</b>: Manche Broker unterstützen eine Authentifizierung mit Benutzername und Passwort.</li>
                        <li><b>Topic-Präfix</b>: Dieser Präfix wird allen Topics vorangestellt, die die Wallbox verwendet.
                            Voreingestellt ist warp/ABC wobei ABC eine eindeutige Kennung pro Wallbox ist,
                            es sind aber andere Präfixe wie z.B. garage_links möglich.
                            Falls mehrere Wallboxen mit dem selben Broker kommunizieren <strong>müssen</strong> eindeutige Präfixe pro Box gewählt werden.</li>
                        <li><b>Client-ID</b>: Mit dieser ID registriert sich die Wallbox beim Broker.</li>
                    </ul>
                    <p>Nachdem die Konfiguration gesetzt und der "MQTT aktivieren"-Schalter gesetzt ist, kann die Konfiguration gespeichert werden.
                    Der ESP startet dann neu und verbindet sich zum Broker. Auf der Status-Seite wird angezeigt, ob die Verbindung aufgebaut werden konnte.</p>
                </div>
                <div class="col-md-12 col-lg-6">
                    <div class="impressions-container">
                        <div class="impressions-item filter-warp-charger" style="height: auto;">
                            <figure style="height: auto;">
                                <a href="img/mqtt/mqtt_ui.png" data-lightbox="impressions" data-title="MQTT-Konfiguration" class="link-preview" title="Preview">
                                    <img src="img/mqtt/mqtt_ui.png" class="img-fluid" alt="">
                                </a>
                            </figure>
                            <div class="impressions-info">
                                MQTT-Konfiguration
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <p>Im Folgenden werden die <a href="https://mosquitto.org/man/mosquitto_pub-1.html">mosquitto_pub</a> und
            <a href="https://mosquitto.org/man/mosquitto_sub-1.html">mosquitto_sub</a>-Befehle des
            <a href="https://mosquitto.org/">Mosquitto-MQTT-Brokers</a> verwendet, um mit dem Broker zu kommunizieren.</p>
        </div>
        <div id="mqtt_section_basics" class="container">
            <h4>Grundlagen</h4>
            <p>
                Wenn die Verbindung zum Broker erfolgreich aufgebaut wurde, sollten jetzt bereits erste Nachrichten der Wallbox eintreffen.
                Sämtliche Nachrichten der Wallbox sind Strings im <a href="https://www.json.org/json-de.html">JSON-Format</a>.
                Genauso müssen alle Nachrichten, die zur Wallbox geschickt werden, das JSON-Format einhalten.
            </p>
            <p>
                Mit <code>mosquitto_sub -v -t "warp/ABC/#"</code> können alle Nachrichten der Wallbox angezeigt werden.
                (Den Präfix warp/ABC gegebenenfalls durch den konfigurierten ersetzen)
                Es könnte z.B. die folgende Nachricht empfangen werden:

                <samp class="samp-box">warp/ABC/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a> {"max_current_configured":32000, "max_current_incoming_cable":13000, "max_current_outgoing_cable":16000}</samp>

                Die Nachrichten des Topics <samp><a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a></samp> geben an,
                welchen Limitierungen der Ladestrom unterliegt.
                Im konkreten Fall begrenzt die Software den Ladestrom auf 32 Ampere, das zur Wallbox führende Kabel ihn auf 13, das zum Fahrzeug gehende Kabel ihn auf 16 Ampere.
                Der maximal mögliche Ladestrom ist immer das Minimum dieser Werte, also in diesem Fall 13 Ampere.
            </p>
            <p>
                Durch Senden der Nachricht <samp>{"current":8000}</samp> an das Topic <samp>warp/ABC/<a class="scrollto" href="#evse_current_limit">evse/current_limit</a></samp>
                kann der Ladestrom auf 8 Ampere begrenzt werden, zum Beispiel so:
                <code>mosquitto_pub -t "warp/ABC/<a class="scrollto" href="#evse_current_limit">evse/current_limit</a>" -m "{\"current\": 8000}'</code>
                (Damit die Beispiele auch mit cmd.exe von Windows kompatibel sind, werden nur doppelte Anführungszeichen verwendet. Anführungszeichen in JSON-Nachrichten müssen deshalb mit \ escapt werden.)
                Der Ladestrom ist jetzt auf 8 Ampere begrenzt, was die Wallbox durch eine neue Nachricht anzeigt:

                <samp class="samp-box">warp/ABC/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a> {"max_current_configured":8000, "max_current_incoming_cable":13000, "max_current_outgoing_cable":16000}</samp>
            </p>
        </div>
    </section>

    <section id="http_section" class="section">
        <div class="container">
            <header class="reference-section-header">
                <h3>HTTP</h3>
            </header>
        </div>
            <div id="http_section_configuration" class="container">
                <h4>Konfiguration</h4>
                <p>
                    Die HTTP-API kann ohne vorherige Konfiguration verwendet werden.
                </p>
            </div>
            <div id="http_section_basics" class="container">
                <h4>Grundlagen</h4>
                <p>
                    Die HTTP-API funktioniert strukturell identisch wie die MQTT-API:
                    Wenn die MQTT-API beispielsweise das Topic <code>warp/ABC/evse/state</code> verwendet,
                    kann die selbe API über die URL <code>http://[IP-Adresse oder Hostname der Wallbox]/evse/state</code> erreicht werden.
                    Die HTTP-API verfügt allerdings über <a class="scrollto" href="#http-only">fortgeschrittene Funktionen</a>, die nicht über MQTT verfügbar sind.
                    Es können zusätzlich die <a href="https://en.wikipedia.org/wiki/Server-sent_events">Server-Sent-Events (SSE)</a> unter
                    <code>http://[IP-Adresse oder Hostname der Wallbox]/events</code> verwendet werden,
                    die von der Wallbox automatisch ausgelöst werden.
                </p>
                <p>
                    Um Analog zum MQTT-Beispiel alle von der Wallbox gesendeten Nachrichten zu empfangen, kann die Event-Verbindung
                    genutzt werden. Hierzu und für die weiteren Beispiele wird <a href="https://curl.se/">cURL</a> verwendet und davon ausgegangen, dass
                    die Wallbox unter der IP-Adresse 10.0.0.1 erreichbar ist.
                </p>
                <p>
                    Mit <code>curl -N 10.0.0.1/events</code> könnte unter anderem folgende Nachricht empfangen werden:
                    <samp class="samp-box">
                        retry: 1000
                        id: 238659782
                        event: <a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a>
                        data: {"max_current_configured":32000, "max_current_incoming_cable":13000, "max_current_outgoing_cable":16000}
                    </samp>
                    Diese Nachricht ist äquivalent zu der aus den MQTT-Grundlagen: Die Wallbox-Software begrenzt den Ladestorm auf 32 Ampere,
                    das Anschlusskabel der Box ihn auf 13 Ampere und das zum Fahrzeug führende Kabel auf 16 Ampere. Es kann also mit 13 Ampere geladen werden.
                </p>
                <p>
                    Wenn nur eine Information abgefragt werden soll, kann mit cURL eine einzelne URL aufgerufen werden:
                    <code class="code-box">
                        curl -s http://10.0.0.1/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a>
                    </code>
                    liefert die gleichen JSON-Daten:
                    <samp class="samp-box">
                        {"max_current_configured":32000, "max_current_incoming_cable":13000, "max_current_outgoing_cable":16000}
                    </samp>
                    Mit <a href="https://stedolan.github.io/jq/">jq</a> können einzelne Werte aus einem JSON-Objekt extrahiert werden.
                    <code class="code-box">
                        curl -s http://10.0.0.1/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a> | jq ".max_current_configured"
                    </code>
                    gibt 32000, also den konfigurierten Ladestrom von 32 Ampere zurück.
                </p>
                <p>
                    Jetzt soll der Ladestrom auf 8 Ampere begrenzt werden. Dafür wird die Nachricht <code>{"current":8000}</code> an die URL <code>http://10.0.0.1/<a class="scrollto" href="#evse_current_limit">evse/current_limit</a></code>
                    geschickt:
                    <code class="code-box">
                        curl -H "Content-Type: application/json" -X PUT -d "{\"current\":8000}" 10.0.0.1/<a class="scrollto" href="#evse_current_limit">evse/current_limit</a></samp>
                    </code>
                    Wichtig ist hierbei, den Content-Type-Header auf application/json zu setzen, da die Anfrage sonst ignoriert wird. Es können sowohl PUT, POST, als auch PATCH verwendet werden, die API verhält sich in allen drei Fällen gleich.<br>
                </p>
                <p>
                    Zur Kontrolle:
                    <code class="code-box">
                        curl -s http://10.0.0.1/<a class="scrollto" href="#evse_state">evse/state</a> | jq ".allowed_charging_current"
                    </code> liefert den erlaubten Ladestrom (also das Minimum der oben erlaubten Ströme), was jetzt <samp>8000</samp>, also 8 Ampere sein sollten.
                </p>
            </div>
            <div id="http_section_auth" class="container">
                <h4>Authentifizierung</h4>
                <p>
                    Die HTTP-API und das Webinterface können durch einen Benutzernamen und ein Passwort geschützt werden.
                    Die Authentifizierung kann im System-Abschnitt des Webinterfaces unter Zugangsdaten aktiviert werden.
                    Alle Requests müssen dann mit der <a href="https://en.wikipedia.org/wiki/Digest_access_authentication">Digest access authentication</a> authentisiert werden.
                    Nicht authentifizierte Requests werden von der Wallbox mit dem HTTP-Code 401 beantwortet. Eine Ausnahme bildet die Hauptseite des Webinterfaces, die den meisten Browsern
                    auf einen nicht authentifizierten Request mit der Login-Seite antwortet.
                </p>
            </div>
    </section>
    <section id="states_section" class="section">
        <div class="container">
          <header class="reference-section-header">
              <h3>Zustände, Kommandos und Konfigurationen</h3>
          </header>
        <p>
            Die Wallbox bietet über MQTT und HTTP drei Arten von Schnittstellen: Zustände, Kommandos und Konfigurationen.
        </p>
        </div>
        <div id="states_section_states" class="container">
        <h4>Zustände</h4>
        <p>
            Zustände sind Statusinformationen, die die Wallbox kontinuierlich an den Broker schickt. Zustände können nicht direkt geändert werden,
            es ist aber möglich, dass Kommandos und Konfigurationen auf indirekte Weise Zustände beeinflussen. So kann durch Verwenden des
            <code><a class="scrollto" href="#evse_current_limit">evse/current_limit</a></code>-Kommandos der konfigurierte Ladestrom soweit gesenkt werden,
            dass er den erlaubten Ladestrom des
            <samp><a class="scrollto" href="#evse_state">evse/state</a></samp>-Zustands verändert. Zustände können vom Broker durch Subscriptions abgefragt werden:
            <code>mosquitto_sub -v -t "warp/ABC/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a>"</code>
            liefert beispielsweise

            <samp class="samp-box">warp/ABC/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a> {"max_current_configured":8000, "max_current_incoming_cable":13000, "max_current_outgoing_cable":16000}</samp>
            Für die HTTP-API funktioniert ein GET auf die entsprechende URL identisch:
            <code>
                curl -s http://10.0.0.1/<a class="scrollto" href="#evse_max_charging_current">evse/max_charging_current</a>
            </code>
        </p>
        </div>
        <div id="states_section_commands" class="container">
        <h4>Kommandos</h4>
        <p>
            Kommandos können durch publishen auf das entsprechende Topic ausgelöst werden. <strong>Der MQTT-Payload eines Kommandos muss immer gültiges JSON sein.</strong>
            Das heißt insbesondere, dass ein Kommando, das keine Informationen benötigt, nicht mit einer leeren Nachricht aufgerufen werden darf, sondern mit <code>null</code>.
            Um einen Neustart des ESPs auszulösen kann beispielsweise folgendes Kommando verwendet werden:

            <code class="code-box">mosquitto_pub -t "warp/ABC/<a class="scrollto" href="#reboot">reboot</a>" -m "null"</code>
            Der analoge HTTP-Request wäre:
            <code class="code-box">
                curl -H "Content-Type: application/json" -X PUT -d "null" http://10.0.0.1/<a class="scrollto" href="#reboot">reboot</a>
            </code>

            Bestimmte Kommandos ändern den Zustand der Wallbox nicht direkt, sondern lösen einmalige Ereignisse aus. Ein Beispiel ist
            <a class="scrollto" href="#evse_stop_charging">evse/stop_charging</a>, das einen Ladevorgang abbricht. Falls ein Kommando
            dieser Art mit dem MQTT-Retain-Flag auf dem Broker hinterlegt wird, wird es nach einen Verbindungsaufbau von der Wallbox ignoriert.
            Das verhindert, dass eigentlich einmalige Ereignisse mehrfach ausgeführt werden.
        </p>
        </div>
        <div id="states_section_configs" class="container">
        <h4>Konfigurationen</h4>
        <p>
            Konfigurationen können sowohl gelesen, als auch geschrieben werden. Da sie im Flash des ESPs abgelegt werden, muss aber, damit eine aktualisierte
            Konfiguration verwendet wird, nach der Aktualisierung ein Neustart des ESPs ausgelöst werden. Konfigurationen werden unter dem jeweiligen Pfad von der
            Wallbox gepublisht. Aktualisierungen werden auf dem speziellen Suffix <code>_update</code> entgegengenommen. Es können dabei nicht zu verändernde Einträge
            der Konfiguration durch <code>null</code> ausgedrückt werden.
        </p>
        <p>Wenn zum Beispiel die Access-Point-Konfiguration der Wallbox wie folgt abgefragt wird:

            <code class="code-box">mosquitto_sub -v -t "warp/ABC/<a class="scrollto" href="#wifi_ap_config">wifi/ap_config</a>"</code>

            <samp class="samp-box">
                "warp/ABC/<a class="scrollto" href="#wifi_ap_config">wifi/ap_config</a>": {"enable_ap":true, "ap_fallback_only":false, "ssid":"warp-ABC", "hide_ssid":false, "passphrase":null, "hostname":"warp-ABC", "channel":1, "ip":[10,0,0,1], "gateway":[10,0,0,1], "subnet":[255,255,255,0]},
            </samp>

            kann der Access Point danach folgendermaßen in den Fallback-Modus gebracht werden:

            <code class="code-box">mosquitto_pub -t "warp/ABC/<a class="scrollto" href="#wifi_ap_config">wifi/ap_config_update</a>" -m "{<strong>\"ap_fallback_only\": true,</strong> \"enable_ap\":null, \"ssid\":null, \"hide_ssid\":null, \"passphrase\":null, \"hostname\":null, \"channel\":null, \"ip\":null, \"gateway\":null, \"subnet\":null}"</code>

            Danach muss, um die Konfiguration anzuwenden noch ein Neustart durchgeführt werden:

            <code class="code-box">mosquitto_pub -t "warp/ABC/<a class="scrollto" href="#reboot">reboot</a>" -m "null"</code>

            Der Access Point sollte dann ab jetzt nur noch aktiv sein, wenn die Verbindung zum konfigurierten WLAN fehlgeschlagen ist.
        </p>
        <p>
            Mit der HTTP-API kann äquivalent die Access-Point-Konfiguration mit
            <code class="code-box">
                curl -s http://10.0.0.1/<a class="scrollto" href="#wifi_ap_config">wifi/ap_config</a>
            </code>
            abgefragt werden, der Fallback-Modus mit
            <code class="code-box">
                curl http://10.0.0.1/<a class="scrollto" href="#wifi_ap_config">wifi/ap_config_update</a> -H "Content-Type: application/json" -X PUT -d "{<strong>\"ap_fallback_only\": true,</strong> \"enable_ap\":null, \"ssid\":null, \"hide_ssid\":null, \"passphrase\":null, \"hostname\":null, \"channel\":null, \"ip\":null, \"gateway\":null, \"subnet\":null}"
            </code>
            aktiviert werden und danach der Neustart mit
            <code class="code-box">
                curl -H "Content-Type: application/json" -X PUT -d "null" http://10.0.0.1/<a class="scrollto" href="#reboot">reboot</a>
            </code>
            ausgelöst werden.
        </p>
        </div>
    </section>
    <section id="reference" class="section row">
        <div class="container">
          <header class="reference-section-header">
              <h3>API-Referenz</h3>
          </header>

{reference}

      </div>
    </section>
  </main>
  </div>
  <!--==========================
    Footer
  ============================-->
  <footer id="footer">
    <div class="footer-top">
      <div class="container">
        <div class="row">

          <div class="col-lg-3 col-md-6 footer-info">
            <h3>WARP</h3>
            <p>WARP ist die Elektromobiliätssparte von Tinkerforge.
              Die Tinkerforge GmbH ist ein 2011 gegründetes Unternehmen, das echtes &bdquo;Made in Germany&ldquo; bietet.
            </p>
          </div>

          <div class="col-lg-3 col-md-6 footer-links">
            <h4>Links</h4>
            <ul>
              <li><i class="ion-ios-arrow-right"></i> <a href="#intro">Start</a></li>
              <li><i class="ion-ios-arrow-right"></i> <a href="https://www.tinkerforge.com/de/shop/warp/wallbox.html">Shop</a></li>
              <li><i class="ion-ios-arrow-right"></i> <a href="https://www.tinkerforge.com/de/home/legal_info/">Impressum</a></li>
              <li><i class="ion-ios-arrow-right"></i> <a href="https://www.tinkerforge.com/de/home/privacy_notice/">Datenschutz</a></li>
              <li><i class="ion-ios-arrow-right"></i> <a href="https://www.tinkerforge.com/de/home/terms_and_conditions/">AGB</a></li>
            </ul>
          </div>

          <div class="col-lg-3 col-md-6 footer-contact">
            <h4>Kontakt</h4>
            <p>
              Tinkerforge GmbH <br>
              Zur Brinke 7 <br>
              33758 Schloß Holte-Stukenbrock<br>
              Deutschland <br>
              <strong>Telefon:</strong> 05207 / 8998614<br>
              <strong>E-Mail:</strong> info@tinkerforge.com<br>
            </p>

            <div class="social-links">
              <a href="https://twitter.com/tinkerforge" class="twitter"><i class="fa fa-twitter"></i></a>
              <a href="https://www.facebook.com/tinkerforge42" class="facebook"><i class="fa fa-facebook"></i></a>
              <a href="https://www.instagram.com/tinkerforge" class="instagram"><i class="fa fa-instagram"></i></a>
              <a href="https://www.linkedin.com/company/tinkerforge-gmbh/" class="linkedin"><i class="fa fa-linkedin"></i></a>
            </div>

          </div>

          <div class="col-lg-3 col-md-6 footer-newsletter">
            <h4>Über uns</h4>
            <p>
              Wir bei Tinkerforge sind der Meinung, dass Produkte offen sein müssen. Nur so gehören sie wirklich den
              Nutzern. Daher folgen wir der Open‐Source‐Philosophie, indem wir die Quelltexte sowie Baupläne all unserer
              Soft- und Hardware veröffentlichen und ermöglichen es so jedem Einzelnen, unsere Produkte nach eigenen
              Wünschen zu verändern und zu erweitern. Durch die enge Zusammenarbeit mit unserer aktiven Community
              entwickeln wir schnell kundenorientierte Lösungen.
            </p>
          </div>

        </div>
      </div>
    </div>
  </footer><!-- #footer -->

  <a href="#" class="back-to-top"><i class="fa fa-chevron-up"></i></a>

  <!-- JavaScript Libraries -->
  <script src="lib/jquery/jquery.min.js"></script>
  <script src="lib/jquery/jquery-migrate.min.js"></script>
  <script src="lib/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="lib/easing/easing.min.js"></script>
  <script src="lib/superfish/hoverIntent.js"></script>
  <script src="lib/superfish/superfish.min.js"></script>
  <script src="lib/owlcarousel/owl.carousel.min.js"></script>
  <script src="lib/isotope/isotope.pkgd.min.js"></script>
  <script src="lib/lightbox/js/lightbox.min.js"></script>
  <script src="lib/touchSwipe/jquery.touchSwipe.min.js"></script>

  <!-- Template Main Javascript File -->
  <script src="js/main.js"></script>

</body>
</html>
